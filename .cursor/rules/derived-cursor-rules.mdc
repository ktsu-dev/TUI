---
description: AI rules derived by SpecStory from the project AI interaction history
globs: *
---

## PROJECT OVERVIEW

This project is a .NET library designed for building text-based user interfaces (TUIs). It supports console providers like Spectre.Console and focuses on rendering UI primitives and composing complex UI components. The architecture follows a Contracts, Models, Services pattern, adhering to SOLID and DRY principles.

## TECH STACK

*   .NET (Specify version when available), currently .NET 9.0
*   Spectre.Console (for console provider support), version 0.49.1 was used during initial development.
*   Microsoft.Extensions.DependencyInjection.Abstractions (Version 8.0.1)
*   Microsoft.Extensions.Logging.Abstractions (Version 8.0.1)

## PROJECT ARCHITECTURE

*   **Contracts:** Defines interfaces for services and data structures.
*   **Models:** Represents the data used within the application.
*   **Services:** Implements the business logic and interacts with the console.
*   **Elements:** Base classes and primitives for UI elements.
*   **Layouts:** Classes for composing complex UI components

The architecture is based on SOLID and DRY principles to ensure maintainability and testability.

## CODING STANDARDS

*   Follow established .NET coding conventions.
*   Adhere to SOLID principles (Single Responsibility, Open/Closed, Liskov Substitution, Interface Segregation, Dependency Inversion).
*   Follow DRY principle (Don't Repeat Yourself) to avoid code duplication.
*   Use meaningful and descriptive names for variables, methods, and classes.
*   Write clear and concise comments to explain complex logic.
*   Copyright headers must be included in all files:
    ```csharp
    // Copyright (c) ktsu.dev
    // All rights reserved.
    // Licensed under the MIT license.
    ```
*   When using `UIContainerBase`, add children via the `AddChild()` method or collection initializer syntax. Direct assignment to the `Children` property is not allowed as it is read-only. For example:

    ```csharp
    // Correct usage with collection initializer
    var panel = new StackPanel
    {
        new TextElement { Text = "Hello" },
        new BorderElement { /* ... */ }
    };

    // Correct usage with AddChild()
    panel.AddChild(new TextElement { Text = "World" });
    ```

## WORKFLOW & RELEASE RULES

(To be defined)

## PROJECT DOCUMENTATION & CONTEXT SYSTEM

*   README.md, DESCRIPTION.md, and other documentation files should contain actual descriptions of the TUI library's functionality, not placeholder text.

## DEBUGGING

When running tests:

*   Use `dotnet test` to execute tests.
*   `dotnet test` might not show test results clearly, use more specific commands if needed.
*   `dotnet test --verbosity normal` provides more detailed output.
*   `dotnet test --logger "console;verbosity=detailed"` provides the most detailed output.
*   `dotnet test TUI.Test --logger trx --logger "console;verbosity=normal"` runs tests for a specific project with detailed console and trx logger output.
*   If encountering SDK-related issues, ensure the correct SDK is installed and configured in `global.json`.
*   If using central package version management, ensure no explicit versions are defined in `Directory.Packages.props`.
*   When test project fails to build, try running test project directly without building the whole solution: `cd TUI.Test && dotnet test --no-build --no-restore`
*   If tests fail due to missing MSTest using statements, add `using Microsoft.VisualStudio.TestTools.UnitTesting;` to the top of the test file.
*   When tests are failing due to code analysis warnings, add `<NoWarn>$(NoWarn);CA1720;CA1805;CA1716;CA1848;CA1307;CA1062;CA1822;CA1031;CA1707;CA1515</NoWarn>` to a `Directory.Build.props` file in the root of the repository.
*   To run tests with detailed console output, use: `dotnet test TUI.Test/TUI.Test.csproj --logger "console;verbosity=detailed"`
*   When using mock objects for UI elements in tests, ensure the `IsVisible` property is explicitly set to `true` to match the default behavior of `UIElementBase`. Mocking frameworks like Moq default `bool` properties to `false`. For example:
    ```csharp
    var mockChild = new Mock<IUIElement>();
    mockChild.Setup(c => c.HandleInput(It.IsAny<InputResult>())).Returns(true);
    mockChild.Setup(c => c.IsVisible).Returns(true);
    ```
*   If the project uses central package management, ensure no explicit versions are defined in the project files (`.csproj`). Define package versions in `Directory.Packages.props` instead.
*   If build fails due to CA (code analysis) warnings, and these are not desired, add the problematic CA rules to the NoWarn list in `.editorconfig`.

## UI PRIMITIVES

*   **TextElement:** A UI element that displays text with styling options (font, color, alignment, word wrap).
*   **BorderElement:** A UI element that draws a border around content, supporting different border styles and titles.

## UI COMPONENT COMPOSITION

*   **StackPanel:** A container that arranges child elements in a horizontal or vertical stack.
*   **BorderElement:** Inherits from `UIContainerBase` and uses the `Children` collection to store child elements, not a `Child` property. However, a `Child` property is provided as a convenience for single-child scenarios.
*   **UIContainerBase:** The `Children` property is read-only. To add children, use the `AddChild()` method or collection initializer syntax.

## RUNNING DEMOS

To run the demo applications:

```bash
dotnet run --project TUI.App
dotnet run --project TUI.App -- --interactive
dotnet run --project TUI.App -- --showcase
```

## NEXT STEPS

Based on the current state of the project, the following steps are recommended:

1.  **Fix ShowcaseDemo.cs** - Replace all `Children = [...]` assignments with `AddChild()` calls
2.  **Add more UI elements** - Create components like Grid, ScrollPanel, Button, InputField
3.  **Improve console provider** - Add more styling options, mouse support, clipboard integration
4.  **Performance optimization** - Add rendering optimizations and dirty region tracking
5.  **Add more demo applications** - Create examples for different use cases